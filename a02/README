****************************************************
Ralph Arvin De Castro		    0923223
CIS*2520		Assignment 2 Password Vault
June 24 2018			rdecastr@uoguelph.ca
****************************************************


************************
Program Description
**************************
 This program implements a password vault. All requirements from the assignment are followed.

Features:
> Welcome Screen: Allows user to make choices
1. Create new file
2. Sign in
3. Exit

> Menu Screen: Allows user to make an option depending on the desired action.
1. Add password
2. Change password
3. Get password
4. Remove password
5. Change master password
6. Log out

> Binary file
1. Program uses binary file to store usernames and passwords.

> Solving Common user errors
1. If the user inputs the incorrect password, then the program will prompt the user again until correct password is given.
2. If the user inputs none of the options on the menu or welcome screen, then program will reask.
3. If the user tries to sign in with non-existing vault, then program will reask.
4. If the user tries to change, get or remove a system that's not on the vault, then program will reask.

> Hash Function
1.my hashfunction spreads the values in the hashtable by taking the sum of the ASCII values of each letter and divide it by the number of table size.
2.the sum of the values would be different for each string and won't insert on the same indexes each time.

************
Compilation
************
 To compile this code:
 run: make

 To compile the testing program:
 run: make test

  Detailed Make options:

  make  compiles the main.c program with the library
  make cppcheck runs the cppcheck option
  make test compiles the testAPI.c program with the library
  make clean removes executable files and assests files

************
Execution
************
 To execute main:
 run: ./bin/runMe

 To execute test:
 run: ./bin/testMe

************
Complexity
************
createTable
  O(1) - only goes through the function to create and allocate memory for the table and its members. Its complexity does not depend on the number of nodes in the hashtable.
createNode
  O(1) - only goes through the function to create and allocate memory for the node and its members. Its complexity does not depend on the number of nodes in the hashtable.
destroyTable
  O(N) - deletes every node through a while loop. Complexity depends on the number of nodes.
insertData
  O(1) - only requires an index to insert the node. Its complexity does not depend on the number of nodes in the hashtable.
removeData
  O(1) - only requires an index to remove the node. Its complexity does not depend on the number of nodes in the hashtable.
lookupData
  O(1) - only requires an index to get the node. Its complexity does not depend on the number of nodes in the hashtable.
changeData
  O(1) - only requires an index to change the node. Its complexity does not depend on the number of nodes in the hashtable.
checkKey
  O(1) - only requires an index to check the key. Its complexity does not depend on the number of nodes in the hashtable.
printTable
  O(N) - goes through every node to print. Complexity depends on the size of hashtable.


****************************
Known Limitations, Issues and Errors
****************************
